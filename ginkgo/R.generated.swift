//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `Facility.png`.
    static let facilityPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Facility", pathExtension: "png")
    /// Resource file `Restaurant.png`.
    static let restaurantPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Restaurant", pathExtension: "png")
    /// Resource file `Shopping.png`.
    static let shoppingPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Shopping", pathExtension: "png")
    /// Resource file `TouristSpot.png`.
    static let touristSpotPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TouristSpot", pathExtension: "png")
    /// Resource file `appIcon.png`.
    static let appIconPng = Rswift.FileResource(bundle: R.hostingBundle, name: "appIcon", pathExtension: "png")
    /// Resource file `appIconx3.png`.
    static let appIconx3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "appIconx3", pathExtension: "png")
    /// Resource file `wakoLogo.png`.
    static let wakoLogoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "wakoLogo", pathExtension: "png")
    
    /// `bundle.url(forResource: "Facility", withExtension: "png")`
    static func facilityPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.facilityPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Restaurant", withExtension: "png")`
    static func restaurantPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.restaurantPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Shopping", withExtension: "png")`
    static func shoppingPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shoppingPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TouristSpot", withExtension: "png")`
    static func touristSpotPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.touristSpotPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "appIcon", withExtension: "png")`
    static func appIconPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appIconPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "appIconx3", withExtension: "png")`
    static func appIconx3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appIconx3Png
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "wakoLogo", withExtension: "png")`
    static func wakoLogoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wakoLogoPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `Facility`.
    static let facility = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facility")
    /// Image `Restaurant`.
    static let restaurant = Rswift.ImageResource(bundle: R.hostingBundle, name: "Restaurant")
    /// Image `Shopping`.
    static let shopping = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shopping")
    /// Image `TouristSpot`.
    static let touristSpot = Rswift.ImageResource(bundle: R.hostingBundle, name: "TouristSpot")
    /// Image `appIcon`.
    static let appIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "appIcon")
    /// Image `appIconx3`.
    static let appIconx3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "appIconx3")
    /// Image `wakoLogo`.
    static let wakoLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "wakoLogo")
    
    /// `UIImage(named: "Facility", bundle: ..., traitCollection: ...)`
    static func facility(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facility, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Restaurant", bundle: ..., traitCollection: ...)`
    static func restaurant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Shopping", bundle: ..., traitCollection: ...)`
    static func shopping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopping, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TouristSpot", bundle: ..., traitCollection: ...)`
    static func touristSpot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touristSpot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "appIcon", bundle: ..., traitCollection: ...)`
    static func appIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "appIconx3", bundle: ..., traitCollection: ...)`
    static func appIconx3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appIconx3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wakoLogo", bundle: ..., traitCollection: ...)`
    static func wakoLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wakoLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ContentsListTableCell`.
    static let contentsListTableCell = _R.nib._ContentsListTableCell()
    
    /// `UINib(name: "ContentsListTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contentsListTableCell) instead")
    static func contentsListTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentsListTableCell)
    }
    
    static func contentsListTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentsListTableCell? {
      return R.nib.contentsListTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentsListTableCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `ContentsDetail`.
    static let contentsDetail = _R.storyboard.contentsDetail()
    /// Storyboard `ContentsListTable`.
    static let contentsListTable = _R.storyboard.contentsListTable()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainTab`.
    static let mainTab = _R.storyboard.mainTab()
    /// Storyboard `Map`.
    static let map = _R.storyboard.map()
    
    /// `UIStoryboard(name: "ContentsDetail", bundle: ...)`
    static func contentsDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contentsDetail)
    }
    
    /// `UIStoryboard(name: "ContentsListTable", bundle: ...)`
    static func contentsListTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contentsListTable)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainTab", bundle: ...)`
    static func mainTab(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTab)
    }
    
    /// `UIStoryboard(name: "Map", bundle: ...)`
    static func map(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.map)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizations` struct is generated, and contains static references to 1 localization keys.
    struct localizations {
      /// en translation: Press touch display
      /// 
      /// Locales: en, ja
      static let pressTouchDisplay = Rswift.StringResource(key: "PressTouchDisplay", tableName: "Localizations", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: Press touch display
      /// 
      /// Locales: en, ja
      static func pressTouchDisplay(_: Void = ()) -> String {
        return NSLocalizedString("PressTouchDisplay", tableName: "Localizations", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ContentsListTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContentsListTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentsListTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentsListTableCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try contentsDetail.validate()
      try contentsListTable.validate()
      try launchScreen.validate()
      try mainTab.validate()
      try map.validate()
    }
    
    struct contentsDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let contentsDetailViewController = StoryboardViewControllerResource<ContentsDetailViewController>(identifier: "ContentsDetailViewController")
      let name = "ContentsDetail"
      
      func contentsDetailViewController(_: Void = ()) -> ContentsDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentsDetailViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.contentsDetail().contentsDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentsDetailViewController' could not be loaded from storyboard 'ContentsDetail' as 'ContentsDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct contentsListTable: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let contentsList = StoryboardViewControllerResource<ContentsListTableViewController>(identifier: "contentsList")
      let name = "ContentsListTable"
      
      func contentsList(_: Void = ()) -> ContentsListTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentsList)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.contentsListTable().contentsList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentsList' could not be loaded from storyboard 'ContentsListTable' as 'ContentsListTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "wakoLogo.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wakoLogo.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct mainTab: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let name = "MainTab"
      
      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mainTab().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'MainTab' as 'MainTabBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct map: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapViewController = StoryboardViewControllerResource<MapViewController>(identifier: "MapViewController")
      let name = "Map"
      
      func mapViewController(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.map().mapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapViewController' could not be loaded from storyboard 'Map' as 'MapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
